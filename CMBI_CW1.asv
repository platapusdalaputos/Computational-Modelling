%% Coursework 1
%% Q1.1.1




load('data.mat');
dwis=double(dwis);
dwis=permute(dwis,[4,1,2,3]);

% Middle slice of the lst image volume, which has b =0
% imshow(flipud(squeeze(dwis(1,:,:,72))'),[]);

% Middle slice of the 2nd image volume, which has b=1000
% imshow(flipud(squeeze(dwis(2,:,:,72))'), []);

qhat = load('bvecs');
size(dwis)

%%
bvals = 1000*sum(qhat.*qhat);

Avox = dwis(:,92,65,72); % A single voxel element
%% Computing the value of the Matric x on one voxel

G = [ones(1,108); -bvals.*qhat(1,:).^2; -2*bvals.*qhat(1,:).*qhat(2,:); -2*bvals.*qhat(1,:).*qhat(3,:); -bvals.*qhat(2,:).^2; -2*bvals.*qhat(2,:).*qhat(3,:); -bvals.*qhat(3,:).^2]';

x = G\log(Avox);

%% Computing Diffusion Tensor

diffusionTensor = [[x(2) x(3) x(4)]; [x(3) x(5) x(6)]; [x(4) x(6) x(7)]];

Mean_diffusivity = trace(diffusionTensor); % Computing the trace of the diffusion tensor




%% Computing Fractional Anisotrophy

[a, b] = eig(diffusionTensor); %  Computing eigenvalues 

% Two columns, Matrix a = the eigenvectors of diffusion tensor   

% Matrix b = eigenvalues of the diffusion tensor, largest values is best guess of fibre orientation

% [a, b] = eig(diffusionTensor);
% ind = find(diag(b) == max(diag(b)));
% maxeig = a(:,ind);
% x = [1 0 0];
% y = [0 1 0];
% z = [0 0 1];
% colourmap(i,j,1) = FA_values72(i,j)*abs(dot(maxeig,x)/(norm(maxeig)*norm(x)));
% colourmap(i,j,2) = FA_values72(i,j)*abs(dot(maxeig,y)/(norm(maxeig)*norm(y)));
% colourmap(i,j,3) = FA_values72(i,j)*abs(dot(maxeig,z)/(norm(maxeig)*norm(z)));




%% Mapping Diffusion tensor of a whole slice

% there are seven values because of the 7 unknowns we need to calculate 

dt_map72 = zeros(7, 145, 174); 


for i = 1:145
    for j =1:174
        A = dwis(:,i,j,72);
        if min(A)>0
            dt_map72(:,i,j) = G\log(A);
            
        end
    end
end

% imshow(flipud(squeeze(dt_map72(1,:,:))'), []);
% imshow(flipud(squeeze(exp(dt_map72(7,:,:)))'), []);
% imshow(flipud(squeeze(dt_map72(1,:,:))'), []);

%% Mean Diffusivity & Fractional Anisotrpy


MD_map72 = zeros(3, 3, 145, 174);
Mean_diffusivity_map72 = zeros(1,145, 174);
FA_map72 = zeros(1,145, 174);
% dwis = diffusion weighted images

for i = 1:145
    for j =1:174        
         MD_map72(:,:,i,j) = [[dt_map72(2,i,j) dt_map72(3,i,j) dt_map72(4,i,j)]; [dt_map72(3,i,j) dt_map72(5,i,j) dt_map72(6,i,j)]; [dt_map72(4,i,j) dt_map72(6,i,j) dt_map72(7,i,j)]];                   
         Mean_diffusivity_map72(:,i,j) = trace(MD_map72(:,:,i,j));
         FA_map72(:,i,j) = sqrt(0.5*(3 - (1/(trace(( MD_map72(:,:,i,j)/trace(MD_map72(:,:,i,j)))^2)))));
    end
end
%% plot Anisotropy



Red = zeros(145, 174, 1);
Green = zeros(145, 174, 1);
Blue = zeros(145, 174, 1);
colourmapR = zeros(145, 174, 1);
colourmapG = zeros(145, 174, 1);
colourmapB = zeros(145, 174, 1);

% [a, b] = eig(diffusionTensor);
ind = find(diag(b) == max(diag(b)));
maxeig = a(:,ind);
x = [1 0 0];
y = [0 1 0];
z = [0 0 1];
% colourmapR(i,j,1) = FA_map72(i,j)*abs(dot(maxeig,x)/(norm(maxeig)*norm(x)));
% colourmapG(i,j,2) = FA_map72(i,j)*abs(dot(maxeig,y)/(norm(maxeig)*norm(y)));
% colourmapB(i,j,3) = FA_map72(i,j)*abs(dot(maxeig,z)/(norm(maxeig)*norm(z)));




for i = 1:145
    for j =1:174        
         MD_map72(:,:,i,j) = [[dt_map72(2,i,j) dt_map72(3,i,j) dt_map72(4,i,j)]; [dt_map72(3,i,j) dt_map72(5,i,j) dt_map72(6,i,j)]; [dt_map72(4,i,j) dt_map72(6,i,j) dt_map72(7,i,j)]];                   
         Mean_diffusivity_map72(:,i,j) = trace(MD_map72(:,:,i,j));
         FA_map72(i,j) = sqrt(0.5*(3 - (1/(trace(( MD_map72(:,:,i,j)/trace(MD_map72(:,:,i,j)))^2)))));
         colourmapR(i,j,1) = FA_map72(i,j)*abs(dot(maxeig,x)/(norm(maxeig)*norm(x)));
         colourmapG(i,j,2) = FA_map72(i,j)*abs(dot(maxeig,y)/(norm(maxeig)*norm(y)));
         colourmapB(i,j,3) = FA_map72(i,j)*abs(dot(maxeig,z)/(norm(maxeig)*norm(z)));
%          if isnan(colourmap(i,j,:))
%              colourmap(i,j,:)=0;
%          end
%              

    end
end





%% Plot Mean Diffusivity

figure(2);
subplot(1,2,1)
imshow(flipud(squeeze(Mean_diffusivity_map72(1,:,:))'), []);
colorbar
title('Mean Diffusivity Map')
subplot(1,2,2)
imshow(flipud(squeeze(exp(dt_map72(1,:,:)))'), []);
colorbar
title('Diffusion Tensor Map')

figure(3)
subplot(1,1,1)
imshow(flipud(squeeze(FA_map72(1,:,:))'), []);
colorbar
title('Fractional Anisotropy Map')

% subplot(1,4,4)
% imshow(flipud(squeeze(exp(dt_map72(1,:,:)))'), []);
% histogram(colourmap


%% plot fractional Anisotrophy
figure(3);
% 
% Rc = uint8(255*~colourmap(:,:,1));                              % Set ‘Red’ If M(:,:,1) == 1
% Gc = uint8(255*~colourmap(:,:,2));                              % Set ‘Green’ If M(:,:,2) == 1
% Bc = uint8(255*~colourmap(:,:,3));                              % Set ‘Blue’ If M(:,:,3) == 1
% Ac = cat(3, Rc, Gc, Bc);                                % Concatenate To Create Synthesis


imshow(colourmapR(:,:,:));
% colorbar

% histogram(colourmap(:,:,:));

% colormap(:,:,3);



% hold on
% imshow(flipud(((colourmap(:,:,:)))'), []);


% data = Red';                                 % Original Data
% datascl = bsxfun(@times, data, [100 50 1]);         % ‘Weigh’ Data
% datadisp = reshape(sum(datascl,2), 10, 10);         % Sum & Reshape
% colormap(jet);                                      % Set Appropriate Colormap
% % figure(1)
% image(datadisp)  

%% Q1.1.2

Avox = dwis(:,92,65,72);

% Define a starting point for the non-linear fit
startx1 = 3.5e+00;  
startx2 = 3e-03;   
startx3 = 2.5e-01;
startx4 = 0;
startx5 = 0;

startx =[startx1, startx2, startx3, startx4, startx5];

% algorithm.
h=optimset('MaxFunEvals',20000,'Algorithm','quasi-newton','TolX',1e-10,'TolFun',1e-10, 'Display', 'iter');

% Now run the fitting
[parameter_hat1,RESNORM,EXITFLAG,OUTPUT]=fminunc('BallStickSSD',startx,h,Avox,bvals,qhat);

% SumRes value
SSDq112 = BallStickSSD(parameter_hat1, Avox, bvals, qhat);
% Predict measurements from model
pd = BallStick_noAvox(parameter_hat1, bvals, qhat);


%% Plot results for Q1.1.2

figure(4);
plot(Avox, ' bs', 'MarkerSize', 8, 'LineWidth', 4); % Actual data 
hold on;
plot(pd, ' rx', 'MarkerSize', 8, 'LineWidth', 2) % Model predictions
xlabel('q-index');
ylabel('S');
legend('Measured', 'Modelled');
title('q1.1.2');

%% Q1.1.3



[parameter_hat,Resnorm_q1_1_3,EXITFLAG,OUTPUT]=fminunc('BallStickSSD_Positive',startx,h,Avox,bvals,qhat);

% Resnorm_q1_1_3 = RESNORM;
S0 = parameter_hat(1);
d  = parameter_hat(2);
f  = parameter_hat(3);
theta = parameter_hat(4);
phi = parameter_hat(5);

parameter_hats = [ S0^2 d^2 Siggy(f) theta phi];

SSDq113 = BallStickSSD(parameter_hats, Avox, bvals, qhat);

pd_positive = BallStick_noAvox(parameter_hats, bvals, qhat);


%% Plot results for Q1.1.3

figure(5);

plot(Avox, ' bs', 'MarkerSize', 8, 'LineWidth', 4); % Actual data 
hold on;
plot(pd_positive, ' rx', 'MarkerSize', 8, 'LineWidth', 2) % Model predictions
xlabel('q index');
ylabel('S');
legend('Measured', 'Model');
title('q1.1.3');


%% Q1.1.4


x1 = 3.5e+00;   
x2 = 3e-03;
x3 = 2.5e-01;
x4 = 0;
x5 = 0;


startx1 = [x1, x2, x3, x4, x5];

numIter = 100;
Resnorm_numIter=zeros(1,numIter);

x1_rand_index=zeros(1,numIter);
x2_rand_index=zeros(1,numIter);
x3_rand_index=zeros(1,numIter);
x4_rand_index=zeros(1,numIter);
x5_rand_index=zeros(1,numIter);

R1_q114 = zeros(1,numIter);
param_hat_bestq114 = zeros(1,5,numIter);
R1_keep  = zeros(1,numIter);
S0_best = zeros(1,numIter);
d_best = zeros(1,numIter);
f_best = zeros(1,numIter);
best_start_q114 = zeros(1,5,numIter);


% Computing RESNORM as a reference with the same starting point as 1.1.2

[parameter_hat1_1_4,RESNORM_Q4,EXITFLAG,OUTPUT]=fminunc('BallStickSSD_Positive',startx1,h,Avox,bvals,qhat);

R = RESNORM_Q4;
display(R);

counter = zeros(1,numIter);

j=0;
k=0;

for i = 2:numIter
    
    x1_rand = normrnd(x1,0.5);
    x1_rand_index(:,i)=x1_rand;
    x2_rand = normrnd(x2,1e-1);
    x2_rand_index(:,i)=x2_rand;
    x3_rand = normrnd(x3,1);
    x3_rand_index(:,i)=x3_rand;
    x4_rand = normrnd(x4,pi);
    x4_rand_index(:,i)=x4_rand;
    x5_rand = normrnd(x5,pi);
    x5_rand_index(:,i)=x5_rand;
    
    startx2 = [x1_rand_index(:,i),x2_rand_index(:,i),x3_rand_index(:,i),x4_rand_index(:,i),x5_rand_index(:,i)];
    
   [parameter_hat1_1_4,R1,EXITFLAG,OUTPUT]=fminunc('BallStickSSD_Positive',startx2,h,Avox,bvals,qhat);
   
   Resnorm_numIter(:,i) = R;
   
   if R1<=R
       counter(:,i)= R1;
   else
       continue
   end
   
    R1_q114(:,1)= R1;
   
    
    R1_q114(:,i)= R1;
    
    
    if R1_q114(:,i)<=min(R1_q114(i-k:i))
        
        
        j=j+1;
        
        R1_keep(:,i) = R1_q114(:,i);
        
        indexq114 = find(R1_keep);
        
        best_start_q114(:,:,j) = startx2;
        param_hat_bestq114(:,:,j) = parameter_hat1_1_4;
        S0_best(:,j) = param_hat_bestq114(1,1,j).^2;
        d_best(:,j) = param_hat_bestq114(1,2,j).^2;
        f_best(:,j) = Siggy(param_hat_bestq114(1,3,j));
        
    else
        
        continue
        
    end
       
   
    
   
end


% Calculate the percentage of iterations that are less than or are equal to 
% the minimum value

N_counter = nnz(counter);
N_Resnorm_numIter=nnz(Resnorm_numIter);
Perc_q1_1_4 = (N_counter/N_Resnorm_numIter)*100;
display(Perc_q1_1_4);

%% Plot Q1.1.4

% parameter_hat1_1_4

q114Parameter = [ 65.2528   -0.0338   -0.5871  -10.4058   -5.7037];

% S0 = parameter_hat1_1_4(1);
% d  = parameter_hat1_1_4(2);
% f  = parameter_hat1_1_4(3);
% theta = parameter_hat1_1_4(4);
% phi = parameter_hat1_1_4(5);

S0 = q114Parameter(1);
d  = q114Parameter(2);
f  = q114Parameter(3);
theta = q114Parameter(4);
phi = q114Parameter(5);

% parameter_hats1_1_4 = [ S0^2 d^2 Siggy(f) theta phi];
% 
% pd_positive1_1_4 = BallStick_noAvox(parameter_hats1_1_4, bvals, qhat);

q114ParameterS = [ S0^2 d^2 Siggy(f) theta phi];

pd_positive1_1_4 = BallStick_noAvox(q114ParameterS, bvals, qhat);


figure(6);
plot(Avox, ' bs', 'MarkerSize', 8, 'LineWidth', 4); % Actual data 
hold on;
plot(pd_positive1_1_4, ' rx', 'MarkerSize', 8, 'LineWidth', 2) % Model predictions
xlabel('q index');
ylabel('S');
legend('Measured', 'Model');
title('q1.1.4');


%% Q1.1.5

% % Attempt parameter maps S0
% 
% S0_map72 = zeros(1,145, 174);
% f_map72 = zeros(1,145, 174);
% d_map72 = zeros(1,145, 174);
% theta_map72 = zeros(1,145, 174);
% phi_map72 = zeros(1,145, 174);
RESNORM_map = zeros(1,145, 174);

startx1_5 = [3.5e+00 3e-03 2.5e-01 0 0];

% 
parameter_hat_data = zeros(1, 5, 145, 174); 
% 
for i = 1:145
    for j =1:174  
        Avox_multi = dwis(:,i,j,72);
        [parameter_hat,RESNORMmap,EXITFLAG,OUTPUT]=fminunc('BallStickSSD_Positive',startx1_5,h,Avox_multi,bvals,qhat);
         parameter_hat_data(:,:,i,j) = parameter_hat;
         RESNORM_map(:,i,j) = RESNORMmap;


    end
    
end

% S0_map72 = zeros(1,145, 174);
% f_map72 = zeros(1,145, 174);
% d_map72 = zeros(1,145, 174);
% theta_map72 = zeros(1,145, 174);
% phi_map72 = zeros(1,145, 174);
% RESNORM_map72 = zeros(1,145, 174);
%%
load('parameter_hat_data.mat')
for i = 1:145
    for j =1:174  
        Avox_multi = dwis(:,i,j,72);
         parameter_hat_data(:,:,i,j) = parameter_hat;
    end
    
end




%% Plot image for Q1.1.5



% load('parameter_hat_data.mat')

S0_map72 = zeros(145, 174);
f_map72 = zeros(145, 174);
d_map72 = zeros(145, 174);
theta_map72 = zeros(145, 174);
phi_map72 = zeros(145, 174);
RESNORM_map72 = zeros(145, 174);

for i = 1:145
    for j =1:174  
         S0_map72(i,j) = parameter_hat_data(1,1,i,j);
         d_map72(i,j) = parameter_hat_data(1,2,i,j);
         f_map72(i,j) = parameter_hat_data(1,3,i,j);
         theta_map72(i,j) = parameter_hat_data(1,4,i,j);
         phi_map72(i,j) = parameter_hat_data(1,5,i,j);
         RESNORM_map72(i,j) = RESNORM_map(1,i,j);
    end
end

S0_map72_sq = S0_map72.^2;
f_map72_sq = Siggy(f_map72);
d_map72_sq = d_map72.^2;

%%


figure(5);
subplot(2,2,1)
imshow(flipud((S0_map72_sq(:,:,:))'),[0 18000]);
colorbar
title('S_0')
subplot(2,2,2)
imshow(flipud(squeeze(f_map72_sq(:,:,:))'), [0 1]);
colorbar
title('f')
subplot(2,2,3)
imshow(flipud((d_map72_sq(:,:))'), [0 4e-3]);
colorbar
title('d')
subplot(2,2,4)
imshow(flipud(squeeze(RESNORM_map72(:,:))'), [0 2e7]);
colorbar
title('RESNORM')
% subplot(2,3,5)
% imshow(flipud(squeeze(phi_map72(:,:))'), []);
% colorbar
% 
% subplot(2,3,6)
% imshow(flipud(squeeze(RESNORM_map72(:,:,:))'), [0 2e7]);
% colorbar
%%
meshx = f_map72_sq.*cos((phi_map72)) .* sin((theta_map72));
meshy = f_map72_sq.*sin((phi_map72)) .* sin((theta_map72));

figure(6);
quiver(meshx,meshy);


%% Q1.2.1 Non - parametric modelling

K = 108 ;% Number of measurements
N = 5 ;% Number of Parameters

x1_rand = normrnd(x(1),30);
x1_rand_index(:,i)=x1_rand;
x2_rand = normrnd(x(2),1e-2);
x2_rand_index(:,i)=x2_rand;
x3_rand = normrnd(x(3),0.5);
x3_rand_index(:,i)=x3_rand;
x4_rand = normrnd(x(4),1);
x4_rand_index(:,i)=x4_rand;
x5_rand = normrnd(x(5),0.5);
x5_rand_index(:,i)=x5_rand;


startx2 = [x1_rand_index(:,i),x2_rand_index(:,i),x3_rand_index(:,i),x4_rand_index(:,i),x5_rand_index(:,i)];

[parameter_hat,RESNORM_boot,EXITFLAG,OUTPUT]=fminunc('BallStickSSD_Positive',startx2,h,Avox,bvals,qhat);

parameter_hats2_1 = [ S0^2 d^2 Siggy(f) theta phi];

predicted = BallStick_noAvox(parameter_hats2_1, bvals, qhat);

sigma = sqrt((1/(K-N))*sum((Avox-predicted').^2));

    

%%
% orig_data = Avox';

num_bs_iterations = 1000;

K = 108;

bootstrap_sample = zeros(num_bs_iterations, K);

s0_boot = zeros(1, num_bs_iterations);

S0_q21= zeros(1, num_bs_iterations);
d_q21= zeros(1, num_bs_iterations);
f_q21= zeros(1, num_bs_iterations);


d_boot = zeros(1, num_bs_iterations);

f_boot = zeros(1, num_bs_iterations);

A_iter = zeros(1, num_bs_iterations);

resnorm_q2 = zeros(1,num_bs_iterations);

resnorm_q2_keep = zeros(1,num_bs_iterations);

index_min = zeros(1,num_bs_iterations);

param_hat_best = zeros(1,5,num_bs_iterations);

j=0;
k=0;

for i = 2:num_bs_iterations
    k=k+1;
    
    
%     x1_rand = normrnd(x(1),30);
%     x1_rand_index(:,i)=x1_rand;
%     x2_rand = normrnd(x(2),1e-2);
%     x2_rand_index(:,i)=x2_rand;
%     x3_rand = normrnd(x(3),0.5);
%     x3_rand_index(:,i)=x3_rand;
%     x4_rand = normrnd(x(4),1);
%     x4_rand_index(:,i)=x4_rand;
%     x5_rand = normrnd(x(5),0.5);
%     x5_rand_index(:,i)=x5_rand;
%     
%     startx2 = [x1_rand_index(:,i),x2_rand_index(:,i),x3_rand_index(:,i),x4_rand_index(:,i),x5_rand_index(:,i)];

    startx1 = 3.5e+00;  
    startx2 = 3e-03;   
    startx3 = 2.5e-01;
    startx4 = 0;
    startx5 = 0;

    startx =[startx1, startx2, startx3, startx4, startx5];
    
    bootstrap_sample(i,:) = predicted + normrnd(predicted, sigma);
%     bootstrap_sample(i,:) = normrnd(Avox, sigma);

    
    [parameter_hat,RESNORM_boot,EXITFLAG,OUTPUT]=fminunc('BallStickSSD_Positive_q114',startx,h,bootstrap_sample(i,:),bvals,qhat);
    
    S0_q21(:,i) = parameter_hat(1).^2;
    d_q21(:,i) = parameter_hat(2).^2;
    f_q21(:,i) = Siggy(parameter_hat(3));

    
    
    resnorm_q2(:,1)= RESNORM_boot;
   
    
    resnorm_q2(:,i)= RESNORM_boot;
    
    
    if resnorm_q2(:,i)<=min(resnorm_q2(i-k:i))
        
        j=j+1;
        
        resnorm_q2_keep(:,i) = resnorm_q2(:,i);
        index = find(resnorm_q2_keep);
        
        param_hat_best(:,:,j) = parameter_hat;
        s0_boot(:,j) = param_hat_best(1,1,j).^2;
        d_boot(:,j) = param_hat_best(1,2,j).^2;
        f_boot(:,j) = Siggy(param_hat_best(1,3,j));
        
    else
        
        continue
        
    end
    
end   


%%

% param_best = zeros(1,length(index));
% 
% 
% for i = 1:length(index)
%     
%     param_best(1,i) = parameter_hat(1,(index(1,i)));
%         
%     
% end

    
%     if mod(i,10)==0 
%                 
%         j=j+1;
%                 
%         [A_iter(1,j), index_min(1,j)]= min(resnorm_q2(i-9:i));
%     
%     else
%         continue
%     end 
%     
% end 



% %%
% 
% best_values_boots = zeros(1,500);
% best_values_S0 = zeros(1,500);
% best_values_d = zeros(1,500);
% best_values_f = zeros(1,500);
% 
% for i = 1:499
%     for j = 1:10
%         best_values_boots(1,i) = min(resnorm_q2(:,i*j+j));
%         best_values_S0(1,i) = min(s0_boot(:,i*j+j));
%         best_values_d(1,i) = min(d_boot(:,i*j+j));
%         best_values_f(1,i) = min(f_boot(:,i*j+j));
%     end 
%     
% end


%% 2_Sigma Value for Parameters

% [Mean_s0, two_std_s0] = normfit(s0_boot);

% s0
Mean_s0 = mean(S0_q21(2:end));
two_sigma_s0 = [mean(S0_q21(2:end))- 2*(std(S0_q21(2:end))), mean(S0_q21(2:end))+2*(std(S0_q21(2:end)))];

% d
Mean_d = mean(d_q21(2:end));
two_sigma_d = [ mean(d_q21(2:end))- 2*(std(d_q21(2:end))), mean(d_q21(2:end))+2*(std(d_q21(2:end)))];

% f
Mean_f = mean(f_q21(2:end));
two_sigma_f = [mean(f_q21(2:end))- 2*(std(f_q21(2:end))), mean(f_q21(2:end))+2*(std(f_q21(2:end)))];


%% 95% Values for Parameters

N = length(S0_q21(2:end));

% s0

S0_sorted = sort(S0_q21(2:end));
[lowerLimit_s0, upperLimit_s0] = deal(S0_sorted(floor(0.025*N)),S0_sorted(ceil(0.975*N)));  
S0_95 = [lowerLimit_s0, upperLimit_s0];

% d

d_sorted = sort(d_q21(2:end));
[lowerLimit_d, upperLimit_d] = deal(d_sorted(floor(0.025*N)),d_sorted(ceil(0.975*N)));  
d_95 = [lowerLimit_d, upperLimit_d];

% f

f_sorted = sort(f_q21(2:end));
[lowerLimit_f, upperLimit_f] = deal(f_sorted(floor(0.025*N)),f_sorted(ceil(0.975*N)));  
f_95 = [lowerLimit_f, upperLimit_f];

%% Q1.2.1 Plot
figure(7);
subplot(1,3,1)
histogram(S0_q21(2:end),'FaceColor',[0 0.4470 0.7410]);
maxY = ylim;
hold on
plot(two_sigma_s0, 1.05*[maxY(2), maxY(2)],'r--*');
hold on
plot(S0_95, 1.01*[maxY(2), maxY(2)],'k--o');
legend( 'S_0','2\sigma','95%', 'Location', 'northeastoutside')


subplot(1,3,2)
histogram(d_q21(2:end),'FaceColor',[0.8500 0.3250 0.0980]);
maxY = ylim;
hold on
plot(two_sigma_d, 1.05*[maxY(2), maxY(2)],'r--*');
hold on
plot(d_95, 1.01*[maxY(2), maxY(2)],'k--o');
legend( 'd','2\sigma','95%', 'Location', 'northeastoutside')

subplot(1,3,3)
histogram(f_q21(2:end),'FaceColor',[0.9290 0.6940 0.1250]);
maxY = ylim;
hold on
plot(two_sigma_f, 1.05*[maxY(2), maxY(2)],'r--*');
hold on
plot(f_95, 1.01*[maxY(2), maxY(2)],'k--o');
legend( 'f','2\sigma','95%', 'Location', 'northeastoutside')

%% 1.2.2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                          % SOLVING FOR S0 %

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

K = 108;
N = 5;

% Sampling trials
num_iter = 1000;

% Create empty array for new accepted values to go inside
accepted_values = zeros(num_iter,5);

j=0;

%initial signal
Before_x = parameter_hat; 



% the std looking at the parameters to gauge
% sigmaq122 = 1e-4; 
noise = 5000;



%initial SSD 
SSD_before = BallStickSSD(parameter_hat, Avox, bvals, qhat);
S = BallStick_noAvox(Avox, bvals, qhat);
sigma = sqrt((1/(K-N))*sum((Avox - S').^2));


% We only want to change the signal value nothing else hence...
parameterAfter = parameter_hat;
%%
for i = 1:num_iter
    
    After_x = normrnd(Before_x, sigma); % Perturbing
    parameterAfter = After_x;
    SSD_after = BallStickSSD(parameterAfter, Avox, bvals, qhat);
    
    loggy = -log(pi*2*(noise^2));
    beffy = (Avox - SSD_before).^2;   
    Affy = (Avox - SSD_after).^2;   
    noisy = 2.*(noise.^2);
    loggy_end_after = log(sin(parameterAfter(4)));
    loggy_end_before = log(sin(Before_x(4)));
    
    logliks1 = sum((loggy-beffy)/(noisy))+ loggy_end_after;
    logliks2 = sum((loggy-Affy)/(noisy))+ loggy_end_before));
    
    
%     logliks1 = sum1-((((Avox - SSD_before).^2)/(2.*(noise.^2)))+log((sin(parameterAfter(5)))));
%     logliks2 = sum1-(((Avox - SSD_after).^2)/(2.*(noise.^2)))+log((sin(Before_x(5))));

%     a = (SSD_before - SSD_after)/(2*noise^2);
      b = logliks1 - logliks2;
      e1 = exp(logliks1);
      e2 = exp(logliks2);
      a = exp(b);
    if a > rand
        
        accepted_values(i,:) = parameterAfter;
        SSD_before = SSD_after;
        j = j+1;
        Before_x = parameterAfter;
        
    else
        accepted_values(i,:) = Before_x ;
    end  
    
   
    
end

Count = j/num_iter;


subplot(1,2,1)
plot(accepted_values(:,5))
% title('S0');
% subplot(1,2,2)
% histogram(accepted_values(:,5),100);

%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                          % SOLVING FOR d %

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Sampling trials
num_iter = 1000;

% Create empty array for new accepted values to go inside
accepted_values_d = zeros(num_iter,1);

j=0;

%initial signal
Before_d = parameter_hat(2); 


% the std looking at the parameters to gauge
sigmaq122d = 1; 
noised = 5;

%initial SSD 
SSD_before_d = BallStickSSD(parameter_hat, Avox, bvals, qhat);

% We only want to change the signal value nothing else hence...
parameterAfter_d = parameter_hat;

for i = 1:num_iter
    
    After_d = normrnd(Before_d, sigmaq122d); % Perturbing
    parameterAfter(2) = After_d;
    SSD_after_d = BallStickSSD(parameterAfter, Avox, bvals, qhat);
    a_d = (SSD_before_d - SSD_after_d)/(2*noised^2);
    if a_d > log(rand)
        
        accepted_values_d(i) = After_d;
        SSD_before_d = SSD_after_d;
        j = j+1;
        Before_d = After_d;
        
    else
        accepted_values_d(i) = Before_d;
    end  
    
end

Count_d = j/num_iter;

plot(accepted_values_d)
title('d');

% histogram (accepted_values_d)


%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                          % SOLVING FOR f %

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Sampling trials
num_iter = 1000;

% Create empty array for new accepted values to go inside
accepted_values_f = zeros(num_iter,1);

j=0;

%initial signal
Before_f = parameter_hat(2); 


% the std looking at the parameters to gauge
sigmaq122f = 1; 
noisef = 5;

%initial SSD 
SSD_before_f = BallStickSSD(parameter_hat, Avox, bvals, qhat);

% We only want to change the signal value nothing else hence...
parameterAfter_f = parameter_hat;

for i = 1:num_iter
    
    After_f = normrnd(Before_f, sigmaq122d); % Perturbing
    parameterAfter(2) = After_f;
    SSD_after_f = BallStickSSD(parameterAfter, Avox, bvals, qhat);
    a_f = (SSD_before_d - SSD_after_f)/(2*noisef^2);
    if a_f > log(rand)
        
        accepted_values_f(i) = After_f;
        SSD_before_f = SSD_after_f;
        j = j+1;
        Before_f = After_f;
        
    else
        accepted_values_f(i) = Before_f;
    end  
    
    
    
    
    
    
end

Count_f = j/num_iter;

% plot(accepted_values_f)
% title('f');

histogram (accepted_values_f,10)
%% Q1.2.2 continued
niter = 1000;
S0_q3=zeros(niter, 1);
d_q3=zeros(niter, 1);
f_q3=zeros(niter, 1);
resnorm_q3 = zeros(niter, 1);

for i = 1:niter
    
    startx2q = [accepted_values(i,1),accepted_values_d(i,1),accepted_values_d(i,1),0,0];
    
           [parameter_hat222,R3,EXITFLAG,OUTPUT]=fminunc('BallStickSSD_Positive',startx2q,h,Avox,bvals,qhat);
           
           resnorm_q3(:,1)=R3;
           
         S0_q3(:,i) = parameter_hat222(1).^2;
         d_q3(:,i) = parameter_hat222(2).^2;
         f_q3(:,i) = Siggy(parameter_hat222(3));       
           
end 

%%

histogram(f_q3(2:end));

%% Q1.2.4

% Calculate the amount of values within lower and upper range and normalise
% it for ever pixel in an image
